user nginx;
worker_processes 1; # numbers of cpu cores for the server
pid /run/nginx.pid; # Log nginx process errors to the following location. 
include /etc/nginx/modules-enabled/*.conf;
# access_log /var/log/nginx/access.log; # or off
error_log  /var/log/nginx/error.log; # or off

events {
	worker_connections 1024;
}

http {

    include mime.types;
    charset utf-8;
    # default_type application/octet-stream;

    # types {
	# 	# add extra mime types
	# }

    # By default, NGINX handles file transmission itself and copies the file into the buffer before sending it. Enabling the sendfile directive eliminates the step of copying the data into the buffer and enables direct copying data from one file descriptor to another.
	sendfile on; 
  
    # Use the tcp_nopush directive together with the sendfile on;directive. This enables NGINX to send HTTP response headers in one packet right after the chunk of data has been obtained by sendfile().
	tcp_nopush on;
	
    # The tcp_nodelay directive allows override of Nagle’s algorithm, originally designed to solve problems with small packets in slow networks. The algorithm consolidates a number of small packets into a larger one and sends the packet with a 200 ms delay. Nowadays, when serving large static files, the data can be sent immediately regardless of the packet size. The delay also affects online applications (ssh, online games, online trading, and so on). By default, the tcp_nodelay directive is set to on which means that the Nagle’s algorithm is disabled. Use this directive only for keepalive connections:
    tcp_nodelay off;

    # Configure buffer sizes Produce 413 error code request entity too large
	# client_body_buffer_size 16k;  # 128k Sets buffer size for reading client request body.
	# client_header_buffer_size 1k;
    # client_max_body_size 8m;      # 10m Sets the maximum allowed size of the client request body.
	# large_client_header_buffers 2 1k;

    # Configure Timeouts
	# client_body_timeout 12;   # Defines a timeout for reading client request body.
	# client_header_timeout 12; # Defines a timeout for reading client request header.

    # keepalive_timeout 300; # The number of seconds to keep a connection open.
	# send_timeout 10; # connection will be cloed in 10 seconds if the request is not completed yet
    # proxy_connect_timeout   90; # Defines a timeout for establishing a connection with a proxied server.
    # proxy_send_timeout      90; # Sets a timeout for transmitting a request to the proxied server.
    # proxy_read_timeout      90; # Defines a timeout for reading a response from the proxied server.
    # proxy_buffers           32 4k; # Sets the number and size of the buffers used for reading a response from the proxied server.
	# server_tokens off; # Hide nginx version in responses
    
    # Limit requests from an IP address to five requests per second.
    # See http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone
    #limit_req_zone  $binary_remote_addr zone=one:10m rate=5r/s;

    # GZIP Configuration
	# gzip on;
	# gzip_min_length 100;
	# gzip_comp_level 3;
	# gzip_types text/css;
	# gzip_types text/javascript;
	# gzip_disable "msie6";

    # Enable open file cache
	# open_file_cache max=1000 inactive=20s;
	# open_file_cache_valid 30s;
	# open_file_cache_min_uses 2;
	# open_file_cache_errors on;

    # We’re adding the map block so that the Connection header is correctly set to close when the Upgrade header in the request is set to ''.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    upstream messenger-servers {
		server projectx-messenger:5002;
        server projectx-messenger:5003;
	}

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

	# ProjectX Reverse Proxy
    server {
        listen 443 ssl; # http2
        #listen 80;

        ssl_certificate /etc/ssl/certs/localhost.cert;
		ssl_certificate_key /etc/ssl/certs/localhost.key;

        root /home/web/projectx; # path to static files
        index index.html;

        location /identity/ {
            proxy_pass         http://projectx-identity:5000/; #proxy_pass does not support http2
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive; # 'Upgrade' for websocket
            proxy_set_header   Host $host;                                 # "X_Forwarded_Host": "172.25.0.1"
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for; # "X_Forwarded_For":  "172.25.0.1"
            proxy_set_header   X-Forwarded-Proto $scheme;                  # protocol http, ws...
            proxy_set_header   X-Forwarded-Location identity;              # for swagger
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_cache_bypass $http_upgrade;
            proxy_redirect     off;
        }

        location /blog/ {
            proxy_pass          http://projectx-blog:5001/;
            proxy_http_version  1.1;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection keep-alive;
            proxy_set_header    Host $host; 
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_set_header    X-Forwarded-Location blog;
        }

        location /messenger/ {
            proxy_pass          http://messenger-servers/;
            proxy_http_version  1.1;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection keep-alive;
            proxy_set_header    Host $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_set_header    X-Forwarded-Location messenger;
        }
        
        location /realtime/ {
            proxy_pass          http://projectx-realtime:5004/;
            proxy_http_version  1.1;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection keep-alive;
            proxy_set_header    Host $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_set_header    X-Forwarded-Location realtime;
        }

        location /ws {
            proxy_pass          http://projectx-realtime:5004/;
            proxy_http_version 1.1;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection $connection_upgrade;
            proxy_set_header    Host $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_set_header    X-Forwarded-Location realtime;
            proxy_cache off;
        }
    }
}